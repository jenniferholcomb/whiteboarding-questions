Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, 
using a number to show how many times the repeated character has been compressed. 
For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

// going to need to loop through string, if string[index] === string[index+1], then counter = 1, then loop until string[index] !== string[index + x]

TERMINATION CASES:
    if (str === "")
    if (typeof str != 'string')

BASE CASE:
    index = 0; 
    index increments by 1 with each loop
    if (index === str.length - 1)

const str = "aaabccdddda";
const counter = 0;

const compressString = (str) => {                      // str = "aaabccdddda"      // counter =  0     // ""
  return (counter) => {
    const index = (str.length - 1) - counter;                   // index = (10) - 0 
    if (typeof str !== 'string') {                  // f
      return;
    } else if (str === "") {                        // f
      return;
    } else if (str[index] === str[index - 1]) {           //  t        // str[10] === str[9]
      return compressString(str)(counter + 1);
    } else {
      if (index === 0) {
        if (counter > 0) {
          return (counter + 1).toString() + str[str.length - 1];
        } else {
          return str[0];
        }
      } else if (counter > 0) {
        return compressString(str.substring(0, index))(0) + (counter + 1).toString() + str[str.length - 1];
      } else {
        return compressString(str.substring(0, index))(0) + str[index];
      }
    }
  }
}


function compressString(str) {
  if (typeof str !== 'str') {         // f
    return;
  } else if (str === "") {           // f
    return;
  }

  let newStr = str;
  let counter = 0;

  for (i = 0; i < (newStr.length - 1); i++) {
    for (j = i + 1; j < newStr.length; j++) {
      if (str[i] === str[j]) {
        counter++;
      } else {
        if (counter)
      }
    }
  }
  return newArr;
}