Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function filter() to solve this. Once you have solved the problem, 
demonstrate how it can be solved with filter(). 
Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi", 7, 53]

Output: [7, 9, "hi", 12, 53]

1. To answer problem, will need to loop through array, checking arr[0] with arr[counter]  where counter ++. Start with counter = 1
2. If that is false, then counter increments by 1 and the check arr[0] with arr[counter + 1]
3. if that is true, then remove arr[counter + 1]. So, we'll create a new arr without that duplicate element
4. Lets create a new array that holds the values as they return as false for any duplicates.
      newArr = [7]  
      arr = arr - arr[0]

BASE CASE: when arr.length === 2, then we'll return our new array

ERROR HANDLING:
  if (typeof arr !== 'object')
  if (arr.length === 0)

Would you like me to solve this with recursion or with a for loop?

RECURSION: 
Input: [7, 9, "hi", 12, "hi", 7, 53]
const counter1 = 0;
const counter2 = 1;

const arrDeduping = (arr) => {                 // counter1 = 3  // counter2 = 4  // arr = [7, 9, "hi", 12, 53]
  return (counter1) => {
    return (counter2) => {
      if (!Array.isArray(arr)) {         // f
        return;
      } else if (arr.length <= 1) {         // f
        return;
      } else if ( arr[counter1] === arr[counter2] ) {                                   // f
        arr.splice(counter2, 1);
        return arrDeduping(arr)(counter1)(counter2 + 1);
      } else if (counter1 === arr.length - 2 || counter1 === arr.length - 1) {           // t      BASE CASE
        return arr;
      } else if ( counter2 >= arr.length - 1) {                                // f
        return arrDeduping(arr)(counter1 + 1)(counter1 + 2);
      } else {                                                        
        return arrDeduping(arr)(counter1)(counter2 + 1);
      }
    }
  }
}

FOR:
Input: arr = [7, 9, "hi", 12, "hi", 7, 53]

function arrDeduping(arr) {
  if (typeof arr !== 'object') {         // f
    return;
  } else if (arr.length <= 1) {         // f
    return;
  }

  let newArr = arr;

  for (i = 0; i < (newArr.length - 1); i++) {
    for (j = i + 1; j < newArr.length; j++) {
      if (arr[i] === arr[j]) {
        newArr.splice(j, 1);
      }
    }
  }
  return newArr;
}


FILTER:

Input: 
const arr = [7, 9, "hi", 12, "hi", 7, 53];      // t, t, t, t, f, f, t 

const newArr((element, index) =>            // element = 4    // index = 2
  arr.indexOf(element) === index 
);
